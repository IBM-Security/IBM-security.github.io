<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Set authentication state management to NOT cookieless</doc>
<resources base="">
<resource path="https://{appliance_hostname}/mga/session_persistence/iam/access/v8/override-configs/">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<method name="PUT" id="Set authentication state management to NOT cookieless"><doc>     The authentication service stores policy state and session information between invocations, keyed off the state ID                       or session ID. Cookies are used to track the state ID unless cookie-less operation is enabled. When cookie-less                       operation is enabled, the state ID is used as the key into the configured store location. </doc>
<doc>     If the cookie-less store is set to DMap or Memory, the lifetime should be set to 600 seconds (authsvc.stateMgmt.lifetime).                      This will limit the inactivity lifetime of the session to 600 seconds (10 minutes). </doc>
<doc>     If cookie-less is enabled, the state ID source should be set to Body Only.                      (sps.authService.stateIdSource.authsvc, sps.authService.stateIdSource.apiauthsvc) </doc>
<doc>     These state ID source parameters allow more fine-grained control over how the authentication service sources the                       state ID. If set to Body and Query, the authentication service continues to accept state ID as a query or body                       parameter. If set to Body Only, the authentication service only accepts the state ID as a body parameter (POST or PUT). </doc>
<doc>     To complete this operation with the RESTful web service, issue an HTTP PUT command on the override configs URI. </doc>
<request>
<doc>
 PUT https://{appliance_hostname}/iam/access/v8/override-configs/
 PUT_DATA:
 [ 
  {
     "id":"15601",
     "value":"false",
     "sensitive": false
  }
 ]</doc><param name="Authorization" style="header">
<doc>Basic Authentication header </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service </doc></param>
</request>
<response status="400">
<doc>There is a problem with the request. The JSON message describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>File not Found, The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="204">
<doc>The request was successful.</doc>
<doc>204 NO CONTENT</doc><param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
</response></method>
</resource>
</resources>
</application>
