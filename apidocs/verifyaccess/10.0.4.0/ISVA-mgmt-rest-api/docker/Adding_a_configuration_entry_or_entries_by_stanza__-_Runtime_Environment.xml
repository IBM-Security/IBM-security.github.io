<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Adding a configuration entry or entries by stanza  - Runtime Environment</doc>
<resources base="">
<resource path="https://{appliance_hostname}/isam/runtime/{resource_id}/configuration/stanza/{stanza_id}/entry_name">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<param type="path" name="resource_id">
<doc>Name of the configuration file to export. For example, ldap.conf, pd.conf, instance.conf</doc>
</param>
<param type="path" name="stanza_id">
<doc>The name of the resource stanza entry. For example, "server". Note: This name cannot contain the string "/entry_name" unless it is the start of the stanza name. ie "/entry_name/name" is valid but "/name/entry_name" is not.</doc>
</param>
<method name="POST" id="Adding a configuration entry or entries by stanza"><doc>     To add one or more configuration entries by stanza with the RESTful web service, issue an HTTP POST command on the Reverse Proxy Instances resource URI.  Please note that duplicate configuration entries are permitted and existing configuration entries will not be replaced. </doc>
<request>
<doc>
 POST https://{appliance_hostname}/isam/runtime/{resource_id}/configuration/stanza/{stanza_id}/entry_name
 
 POST_DATA: {
   entries: 	[
 					["entryName1", "value1"],
 					["entryName2", "value2"]
 				]
 		}
 </doc><param name="Authorization" style="header">
<doc>Basic Authentication header </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service </doc></param>
<representation name="configurationEntryNameAndValueJsonResponse" mediatype="application/json">
<doc>Note: Request body is an array.</doc><param style="plain" name="entries" type="String" optional="No"  repeating="true">
<doc>entry name and value in the format of key value pairs, entries: ["entryName1", "value1"] for the specified stanza </doc>
</param>
</representation></request>
<response status="400">
<doc>There is a problem with the request. The JSON message describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>File not Found, The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="200">
<doc>OK, The request was successful.</doc>
<doc>
 200 ok
 
 [{"id":"entryName1"},{"id":"entryName2"}]
 
 Note: For the changes to take effect, they must be deployed as described in Configuration changes commit process.
 
 </doc><param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="configurationEntryNameJsonResponse" mediatype="application/json">
<doc>Note: Response body is an array.</doc><param style="plain" name="id" type="String" optional="No" >
<doc>The entry name in the format of [{"id":"entryName1"</doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
