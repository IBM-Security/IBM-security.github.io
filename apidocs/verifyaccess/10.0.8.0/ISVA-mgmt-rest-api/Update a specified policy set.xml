<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Update a specified policy set</doc>
<resources base="">
<resource path="https://{appliance_hostname}/iam/access/v8/policysets/{policy_set_id}">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<param type="path" name="policy_set_id">
<doc>The system-assigned policy set ID value.</doc>
</param>
<method name="PUT" id="Update a specified policy set"><doc>   To update the settings of an existing policy set, issue an HTTP PUT command on the   					 policy sets resource URI specifying the ID of the policy set to be updated. </doc>
<doc>	 To update just the policies belonging to the policy set, issue the following  				     command: https://{appliance_hostname}/iam/access/v8/policysets/{policy_set_id}/policies                    specifying the action query parameter add, remove, or set.   </doc>
<request>
<doc>
 Change the policy combining algorithm for policy set 'locationPolicy', 
 ID 2, to "permitOverrides":
  
 PUT https://{appliance_hostname}/iam/access/v8/policysets/2
 
 PUT_DATA: {
 "description":"Group of location policies allowed.",
 "name":"locationPolicySet",
 "predefined":false,
 "policyCombiningAlgorithm":"permitOverrides"
 }
 
 
 Set the policies for policy set "locationPolicy, ID 2, to be policies 
 with IDs 4 and 10.
 Note: "Description" was not included in the PUT_DATA, so it will be 
 reset to null. Also, "policyCombiningAlgorithm" was not included in the 
 PUT_DATA, so it will be reset to the default, "denyOverrides", for this 
 policy set.
 
 PUT https://{appliance_hostname}/iam/access/v8/policysets/2
 
 PUT_DATA: {
 "name":"locationPolicySet",
 "predefined":false,
 "policies":["4","10"]
 }
 
 Note:  To determine the policy ID values for making changes to the 
 policies included in this policy set, issue an HTTP GET command on 
 the policies resource URI: 
 https://{appliance_hostname}/iam/access/v8/policies/.
 
 </doc><doc>
 To determine the policy_set_id value of the policy set to be updated, issue an HTTP GET command on the
 policy sets resource URI:  https://{appliance_hostname}/iam/access/v8/policysets/.
 </doc><param name="Authorization: Basic" style="header">
<doc>Basic authentication header. </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service. </doc></param>
<representation name="policySetJsonRequestUpdate" mediatype="application/json">
<param style="plain" name="name" type="String" optional="No" >
<doc>A unique name for the policy set.</doc>
</param>
<param style="plain" name="description" type="String" optional="Yes" >
<doc>A description of the policy set.  If omitted, the description is reset to null.</doc>
</param>
<param style="plain" name="predefined" type="Boolean" optional="No" >
<doc>False to indicate the policy set is custom defined.</doc>
</param>
<param style="plain" name="policies" type="String" optional="Yes"  repeating="true">
<doc>An array of policy IDs which belong to this policy set. If omitted, the policies currently in the policy set will not be changed. If specified, only the policies identified will be assigned to this set. To remove all policies from the set specify an empty array ("[]").</doc>
</param>
<param style="plain" name="policyCombiningAlgorithm" type="String" optional="Yes" >
<doc>Defines the combined action for the policies in the set. The following values are valid:  "firstApplicable" to indicate that the policy set will return the result of the first policy in the set that returns permit or deny, "denyOverrides" to indicate that the policy set should deny access if any policy in the set returns a response of deny , or "permitOverrides" to indicate that the policy set should permit access if any policy in the set returns a response of permit. Default is "denyOverrides". </doc>
</param>
</representation></request>
<response status="204">
<doc>No content returned.  The request was successful.</doc>
<doc>204 NO CONTENT</doc></response><response status="400">
<doc>Bad Request. There is a problem with the request. The JSON result describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>Not Found. The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="409">
<doc>Conflict. The JSON result indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
