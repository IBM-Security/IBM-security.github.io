<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Retrieve the list of outstanding changes</doc>
<resources base="">
<resource path="https://{appliance_hostname}/isam/pending_changes">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<method name="GET" id="Retrieve the list of outstanding changes"><doc>   The LMI uses a two-stage commit process when you make changes to the appliance. </doc>
<doc> Stage 1:  Changes are made by using the LMI and saved to a staging area. </doc>
<doc> Stage 2:  The user explicitly deploys the changes into production.  Multiple changes can exist in a pending state at the same time. They are committed or rolled back together when a user deploys or rolls back these changes. </doc>
<doc> To retrieve a list of all pending changes issue an HTTP  GET request on the Verify Access pending changes resource URI.  The returned  list of pending changes will not identify each individual change, but  will group changes by key. All the pending changes are committed or  rolled back together when a user deploys or rolls back pending changes. </doc>
<request>
<doc>
 GET https://{appliance_hostname}/isam/pending_changes
 </doc><param name="Authorization" style="header">
<doc>Basic Authentication header </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service </doc></param>
</request>
<response status="200">
<doc>OK, The request was successful.</doc>
<doc> {
 "changes":
   [{
     "policyName":"activation3_0_0.xml",
     "displayKey":"activation",
     "dateString":"2013/12/16 18:48:50",
     "owner":"admin",
     "ui_page":"../license_activation"
   }]
 }</doc><param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="listOutstandingChangesJsonResponse" mediatype="application/json">
<doc>Note: Response body is an array.</doc><param style="plain" name="policyName" type="String" optional="No" >
<doc>Describes the policy</doc>
</param>
<param style="plain" name="displayKey" type="String" optional="No" >
<doc>A key describing the change</doc>
</param>
<param style="plain" name="owner" type="String" optional="No" >
<doc>The name of the user</doc>
</param>
<param style="plain" name="dateString" type="String" optional="No" >
<doc>The date</doc>
</param>
<param style="plain" name="ui_page" type="String" optional="No" >
<doc>The UI page of the change </doc>
</param>
</representation></response><response status="400">
<doc>There is a problem with the request. The JSON message describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>File not Found, The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
