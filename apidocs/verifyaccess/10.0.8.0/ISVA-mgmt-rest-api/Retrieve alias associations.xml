<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Retrieve alias associations</doc>
<resources base="">
<resource path="https://{appliance_hostname}/iam/access/v8/alias_service">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<param type="query" name="sortBy">
<doc>(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA,-fieldB</doc>
</param>
<param type="query" name="count">
<doc>(Optional) The number of records to return.</doc>
</param>
<param type="query" name="start">
<doc>(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.</doc>
</param>
<param type="query" name="filter">
<doc>(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. Valid field names are "id", "username", "federation_id", "type", and "aliases". The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=username%20contains%20scr%20and%20id%20gt%205.</doc>
</param>
<method name="GET" id="Retrieve alias associations"><doc>   To retrieve alias associations,                    issue a HTTP GET command on the alias service resource URI. </doc>
<request>
<doc>
 Retrieve a list of existing alias associations for user 'mary' 
 sorted ascending by federation ID:

 GET https://{appliance_hostname}/iam/access/v8/alias_service?filter=username%equals%20mary&amp;sortBy=+federation_id

 Retrieve a list of existing alias associations for the user 'mary'
 with the federation ID 'https://mysp.com/isam/sps/samlsp/saml20'
 and type 'partner':
 
 GET https://{appliance_hostname}/iam/access/v8/alias_service
 ?filter=username%20equals%20mary%20and%20federation_id%20equals%20https://mysp.com/isam/sps/samlsp/saml20%20and%20type%20equals%20partner

 Retrieve a list of existing alias associations for the federation ID 'https://mysp.com/isam/sps/samlsp/saml20'
 and type 'partner' and alias 'mary@ibm.com':

 GET https://{appliance_hostname}/iam/access/v8/alias_service
 ?filter=federation_id%20equals%20https://mysp.com/isam/sps/samlsp/saml20%20and%20type%20equals%20partner%20and%20aliases%20contains%20mary%40ibm.com
 </doc><param name="Authorization: Basic" style="header">
<doc>Basic authentication header. </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service. </doc></param>
</request>
<response status="200">
<doc>OK. The request was successful.</doc>
<doc>
 200 OK
 [
   {
     "id":"f18de133-2304-3fa1-8712-689344681603",
     "username":"mary",
     "federation_id":"https://mysp.com/isam/sps/samlsp/saml20",
        "type":"partner",
     "aliases":[
       "mary@ibm.com",
       "mary@au.ibm.com"
     ]
   },
   {
     "id":"51a1634c-6ae6-38d5-93af-5aa14c760b32",
     "username":"jack",
     "federation_id":"https://mysp.com/isam/sps/samlsp/saml20",
        "type":"self",
     "aliases":[
       "jack@ibm.com"
     ]
   }
 ]
 </doc><param name="Content-Range:items n-nn/nnn" style="header">
<doc>Indicates which records out of the total number of records were returned in a format similar to the following example&#58; items 0-49/100. </doc></param>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="Alias Association" mediatype="application/json">
<param style="plain" name="id" type="String" optional="No" >
<doc>The unique identifier for the association.</doc>
</param>
<param style="plain" name="username" type="String" optional="No" >
<doc>The user that aliases are associated with.</doc>
</param>
<param style="plain" name="federation_id" type="String" optional="No" >
<doc>The federation. The partner ID could also be included, in the format: federation_id|partner_id</doc>
</param>
<param style="plain" name="type" type="String" optional="No" >
<doc>The type of the aliases. Valid values are "self", "partner", or "old". Defaults to "self".</doc>
</param>
<param style="plain" name="aliases" type="String" optional="No"  repeating="true">
<doc>An array of aliases associated with the user. </doc>
</param>
</representation></response><response status="400">
<doc>Bad Request. There is a problem with the request. The JSON result describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>Not Found. The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
