<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Exporting the filtered System Event Log Using a Date Range</doc>
<resources base="">
<resource path="https://{appliance_hostname}/events/system/time/{time_filter}">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<param type="query" name="time_filter">
<doc>The time filter to apply to the event records. See the examples field for an explanation of the format.</doc>
</param>
<method name="GET" id="Exporting the filtered System Event Log Using a Date Range"><doc>  To export the event log with the RESTful web service, issue an HTTP GET command on the system events log resource URI with a {time_filter} added to the path.                   Note that "time" is a special path which does not represent a literal field in the event records. When the "time" path is used, the filter is interpreted as a numerical range to be applied on the "occurred" field. To perform string-style matching on the "occurred" field, use the "Exporting the filtered System Event Log" API. </doc>
<request>
<doc>Note that the time filter uses Unix time in milliseconds and that the occurred
field in events returned uses Unix time in seconds.

Retrieving all events within a specified time range:
  time_filter: &lt;start_time&gt;-&lt;end_time&gt;
  In this example all events which occurred between 1523364226 and 1523400000 
  are returned.
  GET https://{appliance_hostname}/events/system/time/1523364226000-1523400000000

Retrieving all events after a specified time:
  time_filter: &lt;start_time&gt;-
  In this example all events which occurred after 1523364226 are returned.
  GET https://{appliance_hostname}/events/system/time/1523364226000-

Retrieving all events before a specified time:
  time_filter: -&lt;end_time&gt;
  In this example all events which occurred before 1523364226 are returned.
  GET https://{appliance_hostname}/events/system/time/-1523364226000

Retrieving all events that occurred at a specified time:
  time_filter: &lt;time&gt;
  In this example all events which occurred at 1523364226 are returned.
  GET https://{appliance_hostname}/events/system/time/1523364226000

  Note: This is equivalent to the following request in the regular System 
        Events API:
  GET https://{appliance_hostname}/events/system/occurred/1523364226</doc><param name="Authorization" style="header">
<doc>Basic Authentication header </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service </doc></param>
</request>
<response status="200">
<doc>OK, The request was successful.</doc>
<doc>200 ok

 [
   {
     id: 200,
     "occurred": "1523400000",
     "eventid": "WGAWA0643E",
     "priority" "high",
     "description": "High CPU utilization: 100%",
     "tzOffset": 36000000
   },
   {
     id: 199,
     "occurred": "1523364226",
     "eventid": "WGAWA0643E",
     "priority" "high",
     "description": "High CPU utilization: 100%",
     "tzOffset": 36000000
   }
 ]
 </doc><param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="events_log" mediatype="application/json">
<doc>Note: Response body is an array.</doc><param style="plain" name="occurred" type="String" optional="No" >
<doc>The time of the Event, a numerical number that indicates Unix time in seconds.</doc>
</param>
<param style="plain" name="eventId" type="String" optional="No" >
<doc>The Event ID</doc>
</param>
<param style="plain" name="priority" type="String" optional="No" >
<doc>The priority of the event</doc>
</param>
<param style="plain" name="description" type="String" optional="No" >
<doc>The description for the event</doc>
</param>
<param style="plain" name="tzOffset" type="Integer" optional="No" >
<doc>The Timezone offset in milliseconds </doc>
</param>
</representation></response><response status="400">
<doc>There is a problem with the request. The JSON message describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>File not Found, The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
