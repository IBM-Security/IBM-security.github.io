<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Retrieve a list of policy sets</doc>
<resources base="">
<resource path="https://{appliance_hostname}/iam/access/v8/policysets/">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<param type="query" name="sortBy">
<doc>(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB</doc>
</param>
<param type="query" name="filter">
<doc>(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.</doc>
</param>
<method name="GET" id="Retrieve a list of policy sets"><doc>   To retrieve information on existing policy sets, issue an HTTP GET command on the   				  policy sets resource URI. Qualify the list returned by specifying one or more   				  query parameters: sortBy or filter. </doc>
<request>
<doc>
 Retrieve a list of existing policy sets sorted ascendingly by name:
 
 GET https://{appliance_hostname}/iam/access/v8/policysets/?sortBy=+name
 
 Retrieve a list of policy sets that begin with the letter 'm' (case sensitive) 
 sorted by most recently modified:
 
 GET https://{appliance_hostname}/iam/access/v8/policysets/
 ?filter=name%20startswith%20m&amp;sortBy=-lastmodified
 
 Retrieve all policy sets with a policy combining algorithm of 'denyOverrides" 
 that begin with the letter 'm' (case sensitive):
 
 GET https://{appliance_hostname}/iam/access/v8/policysets/?filter=
 policyCombiningAlgorithm%20equals%20denyOverrides%20and%20name%20startswith%20m
 </doc><param name="Authorization: Basic" style="header">
<doc>Basic authentication header. </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service. </doc></param>
</request>
<response status="200">
<doc>OK. The request was successful.</doc>
<doc>
 200 OK
 [
 {
 "id":"2",
 "description":"Group of location policies allowed.",
 "userlastmodified":"admin",
 "name":"locationPolicySet",
 "lastmodified":"2014-01-19T18:48:55Z",
 "datecreated":"2014-01-19T18:48:55Z",
 "predefined":false,
 "policies":[],
 "policyCombiningAlgorithm":"firstApplicable"
 },
 {
 "id":"1",
 "description":"Testing Set",
 "userlastmodified":"admin",
 "name":"myPolicySet",
 "lastmodified":"2014-01-19T22:41:32Z",
 "datecreated":"2014-01-19T17:52:25Z",
 "predefined":false,
 "policies":["1","2"],
 "policyCombiningAlgorithm":"denyOverrides"
 }
 ]
  
 </doc><param name="Content-Range:items n-nn/nnn" style="header">
<doc>Indicates which records out of the total number of records were returned in a format similar to the following example&#58; items 0-49/100. </doc></param>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="policySetJsonResponse" mediatype="application/json">
<doc>Note: Response body is an array.</doc><param style="plain" name="id" type="String" optional="No" >
<doc>Internally assigned ID value of the policy set.</doc>
</param>
<param style="plain" name="description" type="String" optional="No" >
<doc>A description of the policy set.</doc>
</param>
<param style="plain" name="userlastmodified" type="String" optional="No" >
<doc>User ID of the user who last modified this policy set.</doc>
</param>
<param style="plain" name="name" type="String" optional="No" >
<doc>A unique name for the policy set.</doc>
</param>
<param style="plain" name="lastmodified" type="String" optional="No" >
<doc>Specifies the date and time stamp the policy set was last modified.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ.</doc>
</param>
<param style="plain" name="datecreated" type="String" optional="No" >
<doc>Specifies the date and time stamp the policy set was created.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ.</doc>
</param>
<param style="plain" name="predefined" type="Boolean" optional="No" >
<doc>True, if the policy set is predefined and ships with the product; false, if the policy set is custom defined.</doc>
</param>
<param style="plain" name="policies" type="String" optional="No"  repeating="true">
<doc>An array of policy IDs which belong to this policy set.  The order that the policies appear in this list is used when the policyCombiningAlgorithm is set to "firstApplicable".</doc>
</param>
<param style="plain" name="policyCombiningAlgorithm" type="String" optional="No" >
<doc>Defines the combined action for the policies in the set. The following values are valid: "firstApplicable" to indicate that the policy set will return the result of the first policy in the set that returns permit or deny, "denyOverrides" to indicate that the policy set should deny access if any policy in the set returns a response of deny , or "permitOverrides" to indicate that the policy set should permit access if any policy in the set returns a response of permit. </doc>
</param>
</representation></response><response status="400">
<doc>Bad Request. There is a problem with the request. The JSON result describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>Not Found. The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
