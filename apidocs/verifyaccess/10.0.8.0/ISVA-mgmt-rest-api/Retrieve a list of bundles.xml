<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Retrieve a list of bundles</doc>
<resources base="">
<resource path="https://{appliance_hostname}/iam/access/v8/bundles">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<param type="query" name="start">
<doc>(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.</doc>
</param>
<param type="query" name="count">
<doc>(Optional) The number of records to return.</doc>
</param>
<param type="query" name="filter">
<doc>(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.</doc>
</param>
<method name="GET" id="Retrieve a list of bundles"><doc>   To retrieve information about existing bundles, issue an HTTP GET command on the bundles resource URI.                     Qualify the list returned by specifying one or more of the following query parameters:                    start, count or filter. </doc>
<request>
<doc>
   Retrieve a list of all existing bundles:
 
   GET https://{appliance_hostname}/iam/access/v8/bundles
 
   Retrieve a list of existing bundles, but just return the first one:
 
   GET https://{appliance_hostname}/iam/access/v8/bundles?count=1
 </doc><param name="Authorization: Basic" style="header">
<doc>Basic authentication header. </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service. </doc></param>
</request>
<response status="200">
<doc>OK. The request was successful.</doc>
<doc>
 200 OK
 [
   {
     "id":"1",
     "filename":"AuthMechanismBundle.jar",
     "extensions":
       [
         {
           "id":"CustomAuthHandler0",
           "name":"CustomAuthHandler0",
           "type":"Authentication Mechanism"
         }
       ]
   },
   {
     "id":"2",
     "filename":"ObligationBundle.jar",
     "extensions":
       [
         {
           "id":"PassServerSideObligationHandler0",
           "name":"PassServerSideObligationHandler0",
           "type":"Obligation Handler"
         }
       ]
   }
 ]
  
 </doc><param name="Content-Range:items n-nn/nnn" style="header">
<doc>Indicates which records out of the total number of records were returned in a format similar to the following example&#58; items 0-49/100. </doc></param>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="bundleJsonResponse" mediatype="application/json">
<doc>Note: Response body is an array.</doc><param style="plain" name="id" type="String" optional="No" >
<doc>Internally assigned ID value of the bundle.</doc>
</param>
<param style="plain" name="filename" type="String" optional="No" >
<doc>Name of the file that contains the bundle.</doc>
</param>
<param style="plain" name="extensions" type="bundleExtensionJsonResponse" optional="No"  repeating="true">
<doc>Array of bundle extensions that pertain to the specified bundle. </doc>
</param>
</representation><representation name="bundleExtensionJsonResponse" mediatype="application/json">
<param style="plain" name="id" type="String" optional="No" >
<doc>Unique ID of the extension.</doc>
</param>
<param style="plain" name="name" type="String" optional="No" >
<doc>Unique name of the extension.</doc>
</param>
<param style="plain" name="type" type="String" optional="No" >
<doc>Type of the extension. </doc>
</param>
</representation></response><response status="400">
<doc>Bad Request. There is a problem with the request. The JSON result describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>Not Found. The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
