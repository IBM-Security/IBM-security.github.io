<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Update the list of policies in a policy set</doc>
<resources base="">
<resource path="https://{appliance_hostname}/iam/access/v8/policysets/{policy_set_id}/policies">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<param type="path" name="policy_set_id">
<doc>The system-assigned policy set ID value.</doc>
</param>
<param type="query" name="action">
<doc>Indicates the type of change to the policy set.  Valid values are 'add', 'remove', or 'set'.  'set' will replace the policies currently assigned to the policy set with the inputted values. 'set' can also be used to indicate the order the policies in the set should be evaluated.</doc>
</param>
<method name="PUT" id="Update the list of policies in a policy set"><doc>   To update the list of policies in a policy set, issue an HTTP PUT command on the   				     policy sets policies resource URI. Specify the action query parameter to   					 indicate the type of change to the policy set.  </doc>
<doc>   When the policy combining algorithm for this policy set is set to "firstApplicable",   					 the order that the policies appear in the policies list will be used in processing   					 the policies. To modify the order, specify the 'set' query parameter and provide   					 a list of policies in the order they should be processed. </doc>
<request>
<doc>
 Add policies with IDs 2 and 3 to the policy set with ID 4:	 
 
 https://{appliance_hostname}/iam/access/v8/policysets/4/policies
 ?action=add
 
 PUT_DATA: {
 "policies":["2","3"]
 }
 
 Remove policy with ID 2 from the policy set with ID 4:
 
 https://{appliance_hostname}/iam/access/v8/policysets/4/policies
 ?action=remove
 
 PUT_DATA: {
 "policies":["2"]
 }
 
 Set policy set with ID 4 to have 3 policies, with IDs 2, 3, and 10:
 
 https://{appliance_hostname}/iam/access/v8/policysets/4/policies
 ?action=set
 
 PUT_DATA: {
 "policies":["2","3","10"]
 }
 
 Note:  To determine the policy ID values used in the policies array, 
 issue an HTTP GET command on the policies resource URI:
 https://{appliance_hostname}/iam/access/v8/policies/.
 
 </doc><doc>
 To determine the policy_set_id value of the policy set to be updated, issue an HTTP GET command on the
 policy sets resource URI:  https://{appliance_hostname}/iam/access/v8/policysets/.
 </doc><param name="Authorization: Basic" style="header">
<doc>Basic authentication header. </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service. </doc></param>
<representation name="policyChanges" mediatype="application/json">
<param style="plain" name="policies" type="String" optional="No"  repeating="true">
<doc>Array of policy IDs to be added, removed, or set to the policy set.  The order the policies appear in this list is the order they will be processed. </doc>
</param>
</representation></request>
<response status="204">
<doc>No content returned.  The request was successful.</doc>
<doc>204 NO CONTENT</doc></response><response status="400">
<doc>Bad Request. There is a problem with the request. The JSON result describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>Not Found. The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="409">
<doc>Conflict. The JSON result indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
