<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Exporting the WAF configuration file (modsecurity.conf)</doc>
<resources base="">
<resource path="https://{appliance_hostname}/isam/advanced_configuration/{instance_name}?export&amp;component=waf">
<param type="path" name="instance_name">
<doc>The name of the Reverse Proxy Instance.</doc>
</param>
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<param type="query" name="export">
<doc>An indication that this operation is to retrieve the entire file not just a snippet. This parameter is required.</doc>
</param>
<param type="query" name="component_name">
<doc>A query argument which specifies the component of the resource to be retrieved. For the WAF configuration file (modsecurity.conf) this value should be "waf".</doc>
</param>
<method name="GET" id="Exporting the WAF configuration file"><doc>   To export the WAF configuration file (modsecurity.conf) for a reverse proxy instance with the RESTful web service, issue an HTTP GET command and include the export request parameter on the advanced configuration URI. </doc>
<request>
<doc>GET https://{appliance_hostname}/isam/advanced_configuration/myInstance?export&amp;component=waf</doc><param name="Authorization" style="header">
<doc>Basic Authentication header </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service </doc></param>
</request>
<response status="200">
<doc>OK, The request was successful.</doc>
<doc>200 OK
 
# -- Rule engine initialization ----------------------------------------------

# Enable ModSecurity, attaching it to every transaction. Use detection
# only to start with, because that minimises the chances of post-installation
# disruption.
#
SecRuleEngine DetectionOnly

...</doc><param name="Content-Type:application/octet-stream; charset=UTF-8" style="header">
<doc>The response is a stream of text. </doc></param>
</response><response status="400">
<doc>There is a problem with the request. The JSON message describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>File not Found, The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
