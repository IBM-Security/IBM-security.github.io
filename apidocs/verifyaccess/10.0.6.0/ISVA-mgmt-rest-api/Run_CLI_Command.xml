<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Run CLI Command</doc>
<resources base="">
<resource path="https://{appliance_hostname}/core/cli">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<method name="POST" id="Run CLI Command"><doc> To run a CLI command via a web service call, issue an HTTP POST command on the cli URI. </doc>
<doc> This web service will run the specified CLI web service using any passed in user interaction                  input parameters. Any output generated by the command will be returned to the client as                  JSON data. </doc>
<doc> Note that if the CLI command to be run requires multiple arguments, these should all be included                  as the command name. For example: "tools nslookup www.test.com" would be specified as                  "tools/nslookup/www.test.com". The input parameters are only to specify user interaction responses. </doc>
<doc> There are some CLI commands that are not supported by this web service. These commands require                  user interaction that cannot be handled in a stateless command call. The unsupported commands are:                  <ol type="1">                  <li>isam admin - Please use the "Running pdadmin commands" web service instead (/isam/pdadmin)</li>                  <li>isam dscadmin - Please use the "Distributed session cache administration" web services instead (/isam/dsc/admin)</li>                  <li>management set_password - Please use the "Updating the administrator settings" web service instead (/core/admin_cfg)</li>                  <li>isam policy_db_dump</li>                  <li>isam logs monitor</li>                  <li>isam thales rocs</li>                  <li>isam thales hsconfig</li>                  <li>isam thales cknfastrc</li>                  <li>isam thales nfdiag</li>                  <li>isam thales ckcheckinst</li>                  <li>hardware ipmitool</li></ol> </doc>
<doc> Note that the response code 200 OK returned from the HTTP request does not necessarily indicate that                  CLI command succeeded. It merely indicates that the format of the request allowed the CLI command to                  be run. Any failures generated whilst running the CLI command will be indicated in the JSON response.                  It is the responsibility of the caller to parse the output to ensure that the command succeeded. </doc>
<request>
<doc>
 POST https://{appliance_hostname}/core/cli

 POST_DATA:
 {
     command:firmware/set_comment,
     input:
     [
         1,
         "The new comment"
     ]
 }
 </doc><param name="Authorization" style="header">
<doc>Basic Authentication header </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service </doc></param>
<representation name="cliJsonRequest" mediatype="application/json">
<param style="plain" name="command" type="String" optional="No" >
<doc>The CLI command to run. The different levels of the command are separated by "/". This includes all CLI command arguments. For example "tools/nslookup/www.test.com". This parameter is required.</doc>
</param>
<param style="plain" name="input" type="String" optional="Yes"  repeating="true">
<doc>An array of the user interaction responses required to run the specified response. This parameter is required if the specified CLI command requires user interaction. </doc>
</param>
</representation></request>
<response status="400">
<doc>There is a problem with the request. The JSON message describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>File not Found, The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="message" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="200">
<doc>OK, The request was successful.</doc>
<doc>
 200 OK
 Content-Type:application/json
 {
     "output":"1: isva_10.0.0.0_20170308-0430_nonproduction_dev
                     ...
                     Comment updated"
 }
 </doc><param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting </doc></param>
<representation name="cliJsonResponse" mediatype="application/json">
<param style="plain" name="output" type="String" optional="No" >
<doc>The output generated during the cli command (if any). This needs to be used to determine the success or failure of the command. The HTTP response code only indicates that the command could be run. Not if it succeeds. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
