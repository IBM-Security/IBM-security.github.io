<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Duplicate an existing policy</doc>
<resources base="">
<resource path="https://{appliance_hostname}/iam/access/v8/policies/">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<method name="POST" id="Duplicate a policy"><doc>   To duplicate an existing policy, issue an HTTP POST                     command on the policies resource URI.  The POST DATA                    should come directly from the response data of an HTTP GET                    command for an existing policy. </doc>
<doc>   Policy creation is only supported using the Policy Editor                    on the appliance local management interface (LMI).  However,                    the POST command of the policies resource URI can be used to                    create a new policy by duplicating an existing policy.                     Use policy duplication to migrate policy to a different                     appliance or to restore a policy from a backup.  Ensure                    that the XACML submitted with this command was created                     using the Policy Editor on the LMI and that it was not altered                    in any way. Other XACML sources are not supported.  </doc>
<doc>   First, issue an HTTP GET command on the policies resource URI                     specifying the policy_id of the existing policy that you want                    to duplicate: https://{appliance_hostname}/iam/access/v8/policies/{policy_id}.                    Carefully copy the entire response maintaining all spaces and escape                    characters in the 'policy' element of the response payload . Use it                     as the request payload for the POST command of the                     policies resource URI, as described below.  Make any further updates                    to the generated XACML of the newly created policy using the                     Policy Editor on the LMI. </doc>
<doc>   Note: All attributes and obligations used within the extracted policy                    must be defined and available on the system where the duplicate                    policy is being created.                                      </doc>
<request>
<doc>
 Migrate myLocationPolicy, an existing policy created using the
 Policy Editor on the LMI, to a different appliance:
 
 1) Get the XACML string of myLocationPolicy, with policy ID value 12,
 by issuing a GET command on the policies resource URI:
 
 GET https://{appliance_hostname}/iam/access/v8/policies/12
 
 Response:
 200 OK
 {
 "id":"12",
 "dialect":"urn:oasis:names:tc:xacml:2.0:policy:schema:os",
 "description":"At work location policy.",
 "userlastmodified":"admin",
 "attributesrequired":false,
 "name":"myLocationPolicy",
 "lastmodified":"2014-01-18T10:28:01Z",
 "policy":
 "&lt;?xml version=&#92;"1.0&#92;" encoding=&#92;"UTF-8&#92;"?&gt;&lt;!-- PolicyTag=urn:ibm:
  security:isam:8.0:xacml:2.0:config-policy --&gt;&lt;!-- PolicyName='myL
  ocationPolicy' --&gt;&lt;PolicySet xmlns=&#92;"urn:oasis:names:tc:xacml:2.0
  .......... 
  e=&#92;"http:&#92;/&#92;/www.w3.org&#92;/2001&#92;/XMLSchema#integer&#92;"&gt;10&lt;&#92;/AttributeValue
  &gt;&lt;&#92;/Apply&gt;&lt;&#92;/Apply&gt;&lt;&#92;/Apply&gt;&lt;&#92;/Condition&gt;&lt;&#92;/Rule&gt;&lt;&#92;/Policy&gt;&lt;&#92;/PolicySet&gt;"
 "datecreated":"2014-01-18T10:28:01Z",
 "predefined":false
 }
 
 2) Copy the response and use it as the POST_DATA in the POST command.  Fields 
 in the payload that are not required by the POST action will be ignored during
 processing.
 
 POST https://{other_appliance_hostname}/iam/access/v8/policies/
 
 POST_DATA: {
 "id":"12",
 "dialect":"urn:oasis:names:tc:xacml:2.0:policy:schema:os",
 "description":"At work location policy.",
 "userlastmodified":"admin",
 "attributesrequired":false,
 "name":"myLocationPolicy",
 "lastmodified":"2014-01-18T10:28:01Z",
 "policy":
 "&lt;?xml version=&#92;"1.0&#92;" encoding=&#92;"UTF-8&#92;"?&gt;&lt;!-- PolicyTag=urn:ibm:
  security:isam:8.0:xacml:2.0:config-policy --&gt;&lt;!-- PolicyName='myL
  ocationPolicy' --&gt;&lt;PolicySet xmlns=&#92;"urn:oasis:names:tc:xacml:2.0
  .......... 
  e=&#92;"http:&#92;/&#92;/www.w3.org&#92;/2001&#92;/XMLSchema#integer&#92;"&gt;10&lt;&#92;/AttributeValue
  &gt;&lt;&#92;/Apply&gt;&lt;&#92;/Apply&gt;&lt;&#92;/Apply&gt;&lt;&#92;/Condition&gt;&lt;&#92;/Rule&gt;&lt;&#92;/Policy&gt;&lt;&#92;/PolicySet&gt;"
 "datecreated":"2014-01-18T10:28:01Z",
 "predefined":false
 }
 
 3) Login to the LMI to make updates to myLocationPolicy using
 the policy editor. 
 
 </doc><param name="Authorization: Basic" style="header">
<doc>Basic authentication header. </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service. </doc></param>
<representation name="policyJsonRequest" mediatype="application/json">
<param style="plain" name="dialect" type="String" optional="No" >
<doc>The XACML specification used within the policy. Only valid value is XACML Version 2, "urn:oasis:names:tc:xacml:2.0:policy:schema:os".</doc>
</param>
<param style="plain" name="description" type="String" optional="Yes" >
<doc>A description of the policy.  If omitted, the description is set to "".</doc>
</param>
<param style="plain" name="attributesrequired" type="Boolean" optional="No" >
<doc>True if the values for any attributes specified in the policy must be present in the incoming request.  False if the attribute values may optionally be present.</doc>
</param>
<param style="plain" name="name" type="String" optional="No" >
<doc>The name of the policy.</doc>
</param>
<param style="plain" name="policy" type="String" optional="No" >
<doc>The configured policy in XACML 2.0.  This is an escaped character string that must come directly from the response of an HTTP GET command for an existing policy which was created using the Policy Editor on the appliance LMI.</doc>
</param>
<param style="plain" name="predefined" type="Boolean" optional="No" >
<doc>False to indicate the policy is custom defined. </doc>
</param>
</representation></request>
<response status="201">
<doc>Created. A new resource was created. The request was successful.</doc>
<doc>201 Created</doc><param name="Location: https://{appliance_hostname}/iam/access/v8/{object}/{id}" style="header">
<doc>URI to newly created object. </doc></param>
</response><response status="400">
<doc>Bad Request. There is a problem with the request. The JSON result describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>Not Found. The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="409">
<doc>Conflict. The JSON result indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
