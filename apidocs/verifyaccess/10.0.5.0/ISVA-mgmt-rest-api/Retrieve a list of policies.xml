<?xml version = "1.0" encoding ="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="RAPI.xsl"?>
<application><doc>Retrieve a list of policies</doc>
<resources base="">
<resource path="https://{appliance_hostname}/iam/access/v8/policies/">
<param type="path" name="appliance_hostname">
<doc>Host name of the appliance.</doc>
</param>
<param type="query" name="sortBy">
<doc>(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB</doc>
</param>
<param type="query" name="filter">
<doc>(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.</doc>
</param>
<method name="GET" id="Retrieve a list of policies"><doc>   To retrieve information on existing policies, issue an HTTP GET command on the   					 policies resource URI. Qualify the list returned                     by specifying one or more query parameters: sortBy or filter. </doc>
<doc>   When retrieving a list of policies, the XACML of the policy is                    not returned. To view the XACML of the policy, issue an HTTP GET command on the policies                     resource URI specifying a particular policy ID: https://{appliance_hostname}/iam/access/v8/policies/{policy_id}.  </doc>
<request>
<doc>
 Retrieve a list of existing policies sorted ascendingly by name:
 
 GET https://{appliance_hostname}/iam/access/v8/policies/?sortBy=+name
 
 Retrieve a list of policies that begin with the letter 'm' (case sensitive)
 sorted by most recently modified:
 
 GET https://{appliance_hostname}/iam/access/v8/policies/
 ?filter=name%20startswith%20m&amp;sortBy=-lastmodified
 
 Retrieve all policies which reference location information and begin with the 
 letter 'm' (case sensitive):
 
 GET https://{appliance_hostname}/iam/access/v8/policies/
 ?filter=description%20contains%20location%20and%20name%20startswith%20m
 </doc><param name="Authorization: Basic" style="header">
<doc>Basic authentication header. </doc></param>
<param name="Accept:application/json" style="header">
<doc>Required for requests to the service. </doc></param>
</request>
<response status="200">
<doc>OK. The request was successful.</doc>
<doc>
 200 OK
 [
 {
 "id":"11",
 "dialect":"urn:oasis:names:tc:xacml:2.0:policy:schema:os",
 "description":"Test policy.",
 "userlastmodified":"admin",
 "attributesrequired":false,
 "name":"myPolicy",
 "lastmodified":"2014-01-18T10:24:35Z",
 "datecreated":"2014-01-18T10:21:12Z",
 "predefined":false
 },
 {
 "id":"12",
 "dialect":"urn:oasis:names:tc:xacml:2.0:policy:schema:os",
 "description":"At work location policy.",
 "userlastmodified":"admin",
 "attributesrequired":false,
 "name":"myLocationPolicy",
 "lastmodified":"2014-01-18T12:28:01Z",
 "datecreated":"2014-01-18T12:28:01Z",
 "predefined":false
 }
 ]
  
 </doc><param name="Content-Range:items n-nn/nnn" style="header">
<doc>Indicates which records out of the total number of records were returned in a format similar to the following example&#58; items 0-49/100. </doc></param>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="policyListJsonResponse" mediatype="application/json">
<doc>Note: Response body is an array.</doc><param style="plain" name="id" type="String" optional="No" >
<doc>Internally assigned ID value of the policy.</doc>
</param>
<param style="plain" name="dialect" type="String" optional="No" >
<doc>The XACML specification used within the policy. Only valid value is XACML Version 2, "urn:oasis:names:tc:xacml:2.0:policy:schema:os".</doc>
</param>
<param style="plain" name="description" type="String" optional="No" >
<doc>A description of the policy.</doc>
</param>
<param style="plain" name="userlastmodified" type="String" optional="No" >
<doc>User ID of the user who last made modifications to this policy.</doc>
</param>
<param style="plain" name="attributesrequired" type="Boolean" optional="No" >
<doc>True if the values for any attributes specified in the policy must be present in the incoming request.  False if the attribute values may optionally be present.</doc>
</param>
<param style="plain" name="name" type="String" optional="No" >
<doc>A unique name for the policy.</doc>
</param>
<param style="plain" name="lastmodified" type="String" optional="No" >
<doc>Specifies the date and time stamp the policy was last modified.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ.</doc>
</param>
<param style="plain" name="datecreated" type="String" optional="No" >
<doc>Specifies the date and time stamp the policy was created.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ.</doc>
</param>
<param style="plain" name="predefined" type="Boolean" optional="No" >
<doc>True, if the policy is predefined and ships with the product; false, if the policy is custom defined. </doc>
</param>
</representation></response><response status="400">
<doc>Bad Request. There is a problem with the request. The JSON result describes the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="404">
<doc>Not Found. The requested service does not exist. The JSON message indicates which resource.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response><response status="500">
<doc>An internal error occurred. The JSON message indicates the problem.</doc>
<param name="Content-Type:application/json" style="header">
<doc>Response is in JSON formatting. </doc></param>
<representation name="httpErrorJsonResponse" mediatype="application/json">
<param style="plain" name="result" type="String" optional="No" >
<doc>The error message. </doc>
</param>
</representation></response></method>
</resource>
</resources>
</application>
